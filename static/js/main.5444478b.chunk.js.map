{"version":3,"sources":["logo.svg","App.js","game/cell.jsx","game/game.jsx","board/cell.jsx","board/board.jsx","board/game.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","Cell","_this$props","this","props","x","y","CELL_SIZE","onMouseEnter","react_default","a","createElement","className","style","left","concat","top","width","height","React","Component","WIDTH","HEIGHT","enteredFrom","exitTo","lines","state","cellData","_this","getConnectionPoints","value","entered","isRevealed","isMine","neighbour","isFlagged","data","row","col","centroid","edge","bottom","right","isMouseDown","position","console","log","distFromEdges","nearestDist","keys","Object","i","length","key","_this$props2","enter","exit","push","map","line","react_lineto","x0","y0","x1","y1","_this2","_this$props3","onClick","cMenu","onContextMenu","handleMouseEnter","onMouseOut","handleMouseExit","getValue","drawLine","Board","boardData","initBoardData","setState","mineArray","datarow","dataitem","dimension","Math","floor","random","createEmptyArray","j","isEmpty","mines","randomx","randomy","minesPlanted","getRandomNumber","updatedData","mine","traverseBoard","el","_this3","revealEmpty","gameStatus","revealBoard","alert","getHidden","mineCount","getFlags","e","preventDefault","getMines","FlagArray","JSON","stringify","_this4","onMouseDown","alterMouseDown","onMouseUp","board_cell_Cell","handleCellClick","handleContextMenu","renderBoard","Game2","_this$state","ReactCursorPosition","board_Board","Boolean","window","location","hostname","match","ReactDOM","render","board_game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5444478b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\r\n\r\nclass Cell extends React.Component {\r\n  render() {\r\n    const { x, y, CELL_SIZE, onMouseEnter } = this.props;\r\n    // console.log(\"isActive, position\", isActive, point);\r\n    return (\r\n      <div\r\n        className=\"Cell\"\r\n        style={{\r\n          left: `${CELL_SIZE * x + 1}px`,\r\n          top: `${CELL_SIZE * y + 1}px`,\r\n          width: `${CELL_SIZE - 1}px`,\r\n          height: `${CELL_SIZE - 1}px`\r\n        }}\r\n        onMouseEnter={onMouseEnter}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport \"./game.css\";\r\nimport Cell from \"./cell\";\r\nimport ReactCursorPosition from \"react-cursor-position\";\r\n\r\nconst CELL_SIZE = 100;\r\nconst WIDTH = 800;\r\nconst HEIGHT = 800;\r\n\r\nclass Game extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.rows = HEIGHT / CELL_SIZE;\r\n    this.cols = WIDTH / CELL_SIZE;\r\n    this.board = this.makeEmptyBoard();\r\n  }\r\n\r\n  state = {\r\n    cells: [],\r\n    interval: 100,\r\n    isRunning: false,\r\n    mouseDown: false\r\n  };\r\n\r\n  // Create an empty board\r\n  makeEmptyBoard() {\r\n    let board = [];\r\n    for (let y = 0; y < this.rows; y++) {\r\n      board[y] = [];\r\n      for (let x = 0; x < this.cols; x++) {\r\n        board[y][x] = false;\r\n      }\r\n    }\r\n    return board;\r\n  }\r\n\r\n  // Create cells from this.board\r\n  makeCells() {\r\n    let cells = [];\r\n    for (let y = 0; y < this.rows; y++) {\r\n      for (let x = 0; x < this.cols; x++) {\r\n        if (this.board[y][x]) {\r\n          cells.push({ x, y });\r\n        }\r\n      }\r\n    }\r\n    return cells;\r\n  }\r\n\r\n  // Calculate the position of the board element\r\n  getElementOffset() {\r\n    const rect = this.boardRef.getBoundingClientRect();\r\n    const doc = document.documentElement;\r\n    return {\r\n      x: rect.left + window.pageXOffset - doc.clientLeft,\r\n      y: rect.top + window.pageYOffset - doc.clientTop\r\n    };\r\n  }\r\n\r\n  handleClick = event => {\r\n    const elemOffset = this.getElementOffset();\r\n    const offsetX = event.clientX - elemOffset.x;\r\n    const offsetY = event.clientY - elemOffset.y;\r\n    console.log(\"Offset: (X,Y) \", offsetX, offsetY);\r\n    console.log(\"Client: (X,Y)\", event.clientX, event.clientY);\r\n\r\n    const x = Math.floor(offsetX / CELL_SIZE);\r\n    const y = Math.floor(offsetY / CELL_SIZE);\r\n    console.log(\"Clicked Cell: (r,c) =\", x, y);\r\n    if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\r\n      this.board[y][x] = !this.board[y][x];\r\n    }\r\n    this.setState({ cells: this.makeCells() });\r\n  };\r\n\r\n  // Retrieve the current position, then convert it to relative position, and calculate the cols and rows of the cell being hovered\r\n  handleMouseCurrentPosition = event => {\r\n    if (this.state.mouseDown) {\r\n      const elemOffset = this.getElementOffset();\r\n      const offsetX = event.clientX - elemOffset.x;\r\n      const offsetY = event.clientY - elemOffset.y;\r\n      // console.log(\"Offset: (X,Y) \", offsetX, offsetY);\r\n      // console.log(\"Client: (X,Y)\", event.clientX, event.clientY);\r\n      const x = Math.floor(offsetX / CELL_SIZE);\r\n      const y = Math.floor(offsetY / CELL_SIZE);\r\n      console.log(\"Clicked Cell: (r,c) =\", x, y);\r\n      if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\r\n        this.board[y][x] = !this.board[y][x];\r\n      }\r\n      this.setState({ cells: this.makeCells() });\r\n    }\r\n  };\r\n\r\n  runGame = () => {\r\n    this.setState({ isRunning: true });\r\n    this.runIteration();\r\n  };\r\n\r\n  stopGame = () => {\r\n    this.setState({ isRunning: false });\r\n    if (this.timeoutHandler) {\r\n      window.clearTimeout(this.timeoutHandler);\r\n      this.timeoutHandler = null;\r\n    }\r\n  };\r\n\r\n  alterState = () => {\r\n    let nextState = true ? this.state.mouseDown === false : false;\r\n    // console.log(nextState);\r\n    this.setState({ mouseDown: nextState });\r\n  };\r\n\r\n  handleIntervalChange = event => {\r\n    this.setState({ interval: event.target.value });\r\n  };\r\n\r\n  runIteration() {\r\n    console.log(\"running iteration\");\r\n    let newBoard = this.makeEmptyBoard();\r\n    // TODO: Add logic for each iteration here.\r\n    this.board = newBoard;\r\n    this.setState({ cells: this.makeCells() });\r\n    this.timeoutHandler = window.setTimeout(() => {\r\n      this.runIteration();\r\n    }, this.state.interval);\r\n  }\r\n\r\n  handleCell = event => {\r\n    console.log(event);\r\n  };\r\n\r\n  render() {\r\n    const { cells } = this.state;\r\n    return (\r\n      <div>\r\n        <div\r\n          className=\"Board\"\r\n          style={{\r\n            width: WIDTH,\r\n            height: HEIGHT,\r\n            backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`\r\n          }}\r\n          //   onMouseEnter={this.handleMouseEnter}\r\n          //   onMouseLeave={this.handleMouseLeave}\r\n          onMouseMove={this.handleMouseCurrentPosition}\r\n          onMouseDown={this.alterState}\r\n          onMouseUp={this.alterState}\r\n          // onClick={this.handleClick}\r\n          ref={n => {\r\n            this.boardRef = n;\r\n          }}\r\n        />\r\n        >\r\n        {cells.map(cell => (\r\n          <Cell\r\n            x={cell.x}\r\n            y={cell.y}\r\n            onMouseEnter={this.handleCell}\r\n            CELL_SIZE={CELL_SIZE}\r\n            key={`${cell.x},${cell.y}`}\r\n          />\r\n        ))}\r\n        <div className=\"controls\">\r\n          Update every{\" \"}\r\n          <input\r\n            value={this.state.interval}\r\n            onChange={this.handleIntervalChange}\r\n          />{\" \"}\r\n          msec\r\n          {this.state.isRunning ? (\r\n            <button className=\"button\" onClick={this.stopGame}>\r\n              Stop\r\n            </button>\r\n          ) : (\r\n            <button className=\"button\" onClick={this.runGame}>\r\n              Run\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Game;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Line } from \"react-lineto\";\r\n\r\nconst CELL_SIZE = 100;\r\nlet enteredFrom = \"\";\r\nlet exitTo = \"\";\r\nlet lines = [];\r\n\r\nexport default class Cell extends React.Component {\r\n  state = {\r\n    cellData: this.getConnectionPoints(this.props.value),\r\n    entered: -1\r\n  };\r\n\r\n  getValue() {\r\n    const { value } = this.props;\r\n\r\n    if (!value.isRevealed) {\r\n      return this.props.value.isFlagged ? \"🚩\" : null;\r\n    }\r\n    if (value.isMine) {\r\n      return \"💣\";\r\n    }\r\n    if (value.neighbour === 0) {\r\n      return null;\r\n    }\r\n    return value.neighbour;\r\n  }\r\n\r\n  getConnectionPoints(value) {\r\n    let data = {};\r\n    data.top = value.row * CELL_SIZE;\r\n    data.left = value.col * CELL_SIZE;\r\n    data.centroid = {\r\n      x: data.left + CELL_SIZE / 2,\r\n      y: data.top + CELL_SIZE / 2\r\n    };\r\n    data.edge = {\r\n      top: { x: data.centroid.x, y: data.centroid.y - CELL_SIZE / 2 },\r\n      bottom: { x: data.centroid.x, y: data.centroid.y + CELL_SIZE / 2 },\r\n      left: { x: data.centroid.x - CELL_SIZE / 2, y: data.centroid.y },\r\n      right: { x: data.centroid.x + CELL_SIZE / 2, y: data.centroid.y }\r\n    };\r\n    return data;\r\n  }\r\n\r\n  handleMouseEnter() {\r\n    const { isMouseDown, position, value } = this.props;\r\n    if (isMouseDown) {\r\n      console.log(value.row, value.col);\r\n      const { edge } = this.state.cellData;\r\n      let distFromEdges = {\r\n        left: position.x - edge.left.x,\r\n        right: edge.right.x - position.x,\r\n        top: position.y - edge.top.y,\r\n        bottom: edge.bottom.y - position.y\r\n      };\r\n      let nearestDist = 1000;\r\n      var keys = Object.keys(distFromEdges);\r\n      for (var i = 0; i < keys.length; i++) {\r\n        var key = keys[i];\r\n        if (distFromEdges[key] < nearestDist) {\r\n          nearestDist = distFromEdges[key];\r\n          enteredFrom = key;\r\n        }\r\n      }\r\n      console.log(\"Entry\", enteredFrom);\r\n    }\r\n  }\r\n\r\n  handleMouseExit() {\r\n    const { isMouseDown, value, position } = this.props;\r\n    if (isMouseDown) {\r\n      const { edge } = this.state.cellData;\r\n      let distFromEdges = {\r\n        left: position.x - edge.left.x,\r\n        right: edge.right.x - position.x,\r\n        top: position.y - edge.top.y,\r\n        bottom: edge.bottom.y - position.y\r\n      };\r\n      let nearestDist = 1000;\r\n      var keys = Object.keys(distFromEdges);\r\n      for (var i = 0; i < keys.length; i++) {\r\n        var key = keys[i];\r\n        if (distFromEdges[key] < nearestDist) {\r\n          nearestDist = distFromEdges[key];\r\n          exitTo = key;\r\n        }\r\n      }\r\n      const enter = edge[enteredFrom];\r\n      const exit = edge[exitTo];\r\n      lines.push({ enter, exit });\r\n      console.log(\"Exit\", exitTo);\r\n      console.log(lines);\r\n    }\r\n  }\r\n\r\n  drawLine() {\r\n    const OFFSET = 40;\r\n    return lines.map(line => (\r\n      <Line\r\n        x0={line.enter.x + OFFSET}\r\n        y0={line.enter.y + OFFSET}\r\n        x1={line.exit.x + OFFSET}\r\n        y1={line.exit.y + OFFSET}\r\n      />\r\n    ));\r\n  }\r\n\r\n  render() {\r\n    const { value, onClick, cMenu } = this.props;\r\n    let className =\r\n      \"cell\" +\r\n      (value.isRevealed ? \"\" : \" hidden\") +\r\n      (value.isMine ? \" is-mine\" : \"\") +\r\n      (value.isFlagged ? \" is-flag\" : \"\");\r\n\r\n    return (\r\n      <div\r\n        onClick={onClick}\r\n        className={className}\r\n        onContextMenu={cMenu}\r\n        onMouseEnter={() => this.handleMouseEnter()}\r\n        onMouseOut={() => this.handleMouseExit()}\r\n      >\r\n        {this.getValue()}\r\n        {this.drawLine()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst cellItemShape = {\r\n  isRevealed: PropTypes.bool,\r\n  isMine: PropTypes.bool,\r\n  isFlagged: PropTypes.bool\r\n};\r\n\r\nCell.propTypes = {\r\n  value: PropTypes.objectOf(PropTypes.shape(cellItemShape)),\r\n  onClick: PropTypes.func,\r\n  cMenu: PropTypes.func\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Cell from \"./cell\";\r\n\r\nexport default class Board extends React.Component {\r\n  state = {\r\n    boardData: this.initBoardData(this.props.height, this.props.width),\r\n    isMouseDown: 0\r\n  };\r\n\r\n  /* Helper Functions */\r\n\r\n  // set mouse-button down flag\r\n  alterMouseDown() {\r\n    console.log((this.state.isMouseDown + 1) % 2);\r\n    this.setState({ isMouseDown: (this.state.isMouseDown + 1) % 2 });\r\n  }\r\n\r\n  // get mines\r\n  getMines(data) {\r\n    let mineArray = [];\r\n\r\n    data.map(datarow => {\r\n      datarow.map(dataitem => {\r\n        if (dataitem.isMine) {\r\n          mineArray.push(dataitem);\r\n        }\r\n      });\r\n    });\r\n\r\n    return mineArray;\r\n  }\r\n\r\n  // get Flags\r\n  getFlags(data) {\r\n    let mineArray = [];\r\n\r\n    data.map(datarow => {\r\n      datarow.map(dataitem => {\r\n        if (dataitem.isFlagged) {\r\n          mineArray.push(dataitem);\r\n        }\r\n      });\r\n    });\r\n\r\n    return mineArray;\r\n  }\r\n\r\n  // get Hidden cells\r\n  getHidden(data) {\r\n    let mineArray = [];\r\n\r\n    data.map(datarow => {\r\n      datarow.map(dataitem => {\r\n        if (!dataitem.isRevealed) {\r\n          mineArray.push(dataitem);\r\n        }\r\n      });\r\n    });\r\n\r\n    return mineArray;\r\n  }\r\n\r\n  // get random number given a dimension\r\n  getRandomNumber(dimension) {\r\n    // return Math.floor(Math.random() * dimension);\r\n    return Math.floor(Math.random() * 1000 + 1) % dimension;\r\n  }\r\n\r\n  // Gets initial board data\r\n  initBoardData(height, width) {\r\n    let data = this.createEmptyArray(height, width);\r\n    // data = this.plantMines(data, height, width, mines);\r\n    // data = this.getNeighbours(data, height, width);\r\n    return data;\r\n  }\r\n\r\n  createEmptyArray(height, width) {\r\n    let data = [];\r\n\r\n    for (let i = 0; i < height; i++) {\r\n      data.push([]);\r\n      for (let j = 0; j < width; j++) {\r\n        data[i][j] = {\r\n          row: i,\r\n          col: j,\r\n          isMine: false,\r\n          neighbour: 0,\r\n          isRevealed: false,\r\n          isEmpty: false,\r\n          isFlagged: false\r\n        };\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n  // plant mines on the board\r\n  plantMines(data, height, width, mines) {\r\n    let randomx,\r\n      randomy,\r\n      minesPlanted = 0;\r\n\r\n    while (minesPlanted < mines) {\r\n      randomx = this.getRandomNumber(width);\r\n      randomy = this.getRandomNumber(height);\r\n      if (!data[randomx][randomy].isMine) {\r\n        data[randomx][randomy].isMine = true;\r\n        minesPlanted++;\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  // get number of neighbouring mines for each board cell\r\n  getNeighbours(data, height, width) {\r\n    let updatedData = data,\r\n      index = 0;\r\n\r\n    for (let i = 0; i < height; i++) {\r\n      for (let j = 0; j < width; j++) {\r\n        if (data[i][j].isMine !== true) {\r\n          let mine = 0;\r\n          const area = this.traverseBoard(data[i][j].x, data[i][j].y, data);\r\n          area.map(value => {\r\n            if (value.isMine) {\r\n              mine++;\r\n            }\r\n          });\r\n          if (mine === 0) {\r\n            updatedData[i][j].isEmpty = true;\r\n          }\r\n          updatedData[i][j].neighbour = mine;\r\n        }\r\n      }\r\n    }\r\n\r\n    return updatedData;\r\n  }\r\n\r\n  // looks for neighbouring cells and returns them\r\n  traverseBoard(x, y, data) {\r\n    const el = [];\r\n\r\n    //up\r\n    if (x > 0) {\r\n      el.push(data[x - 1][y]);\r\n    }\r\n\r\n    //down\r\n    if (x < this.props.height - 1) {\r\n      el.push(data[x + 1][y]);\r\n    }\r\n\r\n    //left\r\n    if (y > 0) {\r\n      el.push(data[x][y - 1]);\r\n    }\r\n\r\n    //right\r\n    if (y < this.props.width - 1) {\r\n      el.push(data[x][y + 1]);\r\n    }\r\n\r\n    // top left\r\n    if (x > 0 && y > 0) {\r\n      el.push(data[x - 1][y - 1]);\r\n    }\r\n\r\n    // top right\r\n    if (x > 0 && y < this.props.width - 1) {\r\n      el.push(data[x - 1][y + 1]);\r\n    }\r\n\r\n    // bottom right\r\n    if (x < this.props.height - 1 && y < this.props.width - 1) {\r\n      el.push(data[x + 1][y + 1]);\r\n    }\r\n\r\n    // bottom left\r\n    if (x < this.props.height - 1 && y > 0) {\r\n      el.push(data[x + 1][y - 1]);\r\n    }\r\n\r\n    return el;\r\n  }\r\n\r\n  // reveals the whole board\r\n  revealBoard() {\r\n    let updatedData = this.state.boardData;\r\n    updatedData.map(datarow => {\r\n      datarow.map(dataitem => {\r\n        dataitem.isRevealed = true;\r\n      });\r\n    });\r\n    this.setState({\r\n      boardData: updatedData\r\n    });\r\n  }\r\n\r\n  /* reveal logic for empty cell */\r\n  revealEmpty(x, y, data) {\r\n    let area = this.traverseBoard(x, y, data);\r\n    area.map(value => {\r\n      if (\r\n        !value.isFlagged &&\r\n        !value.isRevealed &&\r\n        (value.isEmpty || !value.isMine)\r\n      ) {\r\n        data[value.x][value.y].isRevealed = true;\r\n        if (value.isEmpty) {\r\n          this.revealEmpty(value.x, value.y, data);\r\n        }\r\n      }\r\n    });\r\n    return data;\r\n  }\r\n\r\n  // Handle User Events\r\n\r\n  handleCellClick(x, y) {\r\n    // check if revealed. return if true.\r\n    if (\r\n      this.state.boardData[x][y].isRevealed ||\r\n      this.state.boardData[x][y].isFlagged\r\n    )\r\n      return null;\r\n\r\n    // check if mine. game over if true\r\n    if (this.state.boardData[x][y].isMine) {\r\n      this.setState({ gameStatus: \"You Lost.\" });\r\n      this.revealBoard();\r\n      alert(\"game over\");\r\n    }\r\n\r\n    let updatedData = this.state.boardData;\r\n    updatedData[x][y].isFlagged = false;\r\n    updatedData[x][y].isRevealed = true;\r\n\r\n    if (updatedData[x][y].isEmpty) {\r\n      updatedData = this.revealEmpty(x, y, updatedData);\r\n    }\r\n\r\n    if (this.getHidden(updatedData).length === this.props.mines) {\r\n      this.setState({ mineCount: 0, gameStatus: \"You Win.\" });\r\n      this.revealBoard();\r\n      alert(\"You Win\");\r\n    }\r\n\r\n    this.setState({\r\n      boardData: updatedData,\r\n      mineCount: this.props.mines - this.getFlags(updatedData).length\r\n    });\r\n  }\r\n\r\n  handleContextMenu(e, x, y) {\r\n    e.preventDefault();\r\n    let updatedData = this.state.boardData;\r\n    let mines = this.state.mineCount;\r\n\r\n    // check if already revealed\r\n    if (updatedData[x][y].isRevealed) return;\r\n\r\n    if (updatedData[x][y].isFlagged) {\r\n      updatedData[x][y].isFlagged = false;\r\n      mines++;\r\n    } else {\r\n      updatedData[x][y].isFlagged = true;\r\n      mines--;\r\n    }\r\n\r\n    if (mines === 0) {\r\n      const mineArray = this.getMines(updatedData);\r\n      const FlagArray = this.getFlags(updatedData);\r\n      if (JSON.stringify(mineArray) === JSON.stringify(FlagArray)) {\r\n        this.setState({ mineCount: 0, gameStatus: \"You Win.\" });\r\n        this.revealBoard();\r\n        alert(\"You Win\");\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      boardData: updatedData,\r\n      mineCount: mines\r\n    });\r\n  }\r\n\r\n  renderBoard(data, position) {\r\n    return data.map(datarow => {\r\n      return datarow.map(dataitem => {\r\n        return (\r\n          <div\r\n            key={dataitem.row * datarow.length + dataitem.col}\r\n            onMouseDown={() => this.alterMouseDown()}\r\n            onMouseUp={() => this.alterMouseDown()}\r\n          >\r\n            <Cell\r\n              onClick={() => this.handleCellClick(dataitem.row, dataitem.col)}\r\n              // onEnter={() => this.handleMouseEnter(dataitem.row, dataitem.col)}\r\n              cMenu={e => this.handleContextMenu(e, dataitem.row, dataitem.col)}\r\n              value={dataitem}\r\n              position={position}\r\n              isMouseDown={this.state.isMouseDown}\r\n            />\r\n\r\n            {datarow[datarow.length - 1] === dataitem ? (\r\n              <div className=\"clear\" />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { position } = this.props;\r\n    return (\r\n      <div className=\"board\">\r\n        {this.renderBoard(this.state.boardData, position)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nBoard.propTypes = {\r\n  height: PropTypes.number,\r\n  width: PropTypes.number,\r\n  mines: PropTypes.number\r\n};\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Board from \"./board\";\r\nimport \"./style.scss\";\r\nimport ReactCursorPosition from \"react-cursor-position\";\r\n\r\nclass Game2 extends React.Component {\r\n  state = {\r\n    height: 10,\r\n    width: 10,\r\n    mines: 10\r\n  };\r\n\r\n  render() {\r\n    const { height, width, mines } = this.state;\r\n    return (\r\n      <div className=\"game\">\r\n        <ReactCursorPosition>\r\n          <Board height={height} width={width} mines={mines} />\r\n        </ReactCursorPosition>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Game2;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Game from \"./game/game\";\nimport Game2 from \"./board/game\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Game2 />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}